service: my-express-application

custom:
  alerts:
    stages:
      - production
      - namik
    topics:
      alarm:
        topic: ${self:service}-${self:provider.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: ${env:EMAIL} # Change this to your email address
    alarms:
      - functionErrors
      - functionThrottles

  tableName: 'users-table-${self:provider.stage}'
  dynamodb:
    start:
      migrate: true

plugins:
  - serverless-dynamodb-local
  - serverless-plugin-aws-alerts
  - serverless-offline

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${env:STAGE}
  region: eu-west-2
  # deploymentBucket:
  #   name: com.serverless.${self:service}.${self:provider.stage}.deploys
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    USERS_TABLE: ${self:custom.tableName}

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  getUser:
    handler: index.handler
    events:
      - http: 'GET /users/{proxy+}'
  createUser:
    handler: index.handler
    events:
      - http: 'POST /users'

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
